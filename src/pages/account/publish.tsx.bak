import * as React from "react";
import type { GetServerSideProps } from "next";
import Link from "next/link";
import Image from "next/image";
import { getUserFromRequest } from "@/lib/session";
import { MAX_LISTING_IMAGES } from "@/lib/constants";

const UPLOAD_URL = "/api/upload"; // tu endpoint de subida ya existente

export default function PublishPage(){
  const [submitting,setSubmitting] = React.useState(false);
  const [msg,setMsg] = React.useState<string>("");

  const [cover,setCover] = React.useState<string>("");
  const [gallery,setGallery] = React.useState<string[]>([]);
  const [preview,setPreview] = React.useState<string[]>([]);

  React.useEffect(()=>{
    const imgs = (cover ? [cover,...gallery]:gallery).filter(Boolean);
    setPreview(imgs.slice(0,MAX_LISTING_IMAGES));
  },[cover,gallery]);

  async function uploadFile(file: File): Promise<string>{
    const fd = new FormData();
    fd.append("file", file);
    // Compatibilidad con back que espera "image"
    fd.append("image", file);
    const r = await fetch(UPLOAD_URL, { method:"POST", body: fd });
    if(!r.ok) throw new Error("upload");
    const d = await r.json();
    return d?.path || d?.url || d?.image || "";
  }

  async function onPickCover(e: React.ChangeEvent<HTMLInputElement>){
    const f = e.target.files?.[0];
    if(!f) return;
    try{
      const path = await uploadFile(f);
      setCover(path);
      setMsg("✅ Portada subida (recuerda Publicar)");
    }catch{
      setMsg("❌ Error subiendo portada");
    }finally{
      // mantener el nombre en el input
    }
  }

  async function onPickGallery(e: React.ChangeEvent<HTMLInputElement>){
    const files = Array.from(e.target.files||[]);
    if(!files.length) return;
    try{
      const rest = MAX_LISTING_IMAGES - (cover?1:0) - gallery.length;
      const batch = files.slice(0, Math.max(0, rest));
      const uploaded: string[] = [];
      for(const f of batch){
        const path = await uploadFile(f);
        uploaded.push(path);
      }
      setGallery(prev => {
        const merged = [...prev, ...uploaded];
        // quitar duplicadas, respetando orden y límite total
        const unique = merged.filter((u,i,arr)=>arr.indexOf(u)===i);
        const limit = MAX_LISTING_IMAGES - (cover?1:0);
        return unique.slice(0, Math.max(0, limit));
      });
      setMsg("✅ Fotos agregadas");
    }catch{
      setMsg("❌ Error subiendo fotos");
    }
  }

  function addGalleryUrl(url: string){
    if(!url) return;
    setGallery(prev=>{
      const already = (cover? [cover,...prev]:prev);
      if(already.includes(url)) return prev;
      const limit = MAX_LISTING_IMAGES - (cover?1:0);
      const next = [...prev, url].slice(0, Math.max(0, limit));
      return next;
    });
  }

  async function onSubmit(e: React.FormEvent<HTMLFormElement>){
    e.preventDefault();
    setSubmitting(true); setMsg("");
    const fd = new FormData(e.currentTarget as HTMLFormElement);
    const body:any = {
      title: fd.get("title"),
      location: fd.get("location"),
      priceUsd: fd.get("priceUsd"),
      description: fd.get("description"),
      image: cover || "",
      images: gallery
    };
    try{
      const r = await fetch("/api/listings/create", {
        method:"POST",
        headers: {"Content-Type":"application/json"},
        body: JSON.stringify(body)
      });
      const d = await r.json();
      if(!r.ok) throw new Error(d?.error || "SERVER");
      setMsg("✅ Publicada");
      window.location.href = `/properties/${d.id}`;
    }catch(err:any){
      setMsg("❌ " + (err?.message || "SERVER"));
    }finally{
      setSubmitting(false);
    }
  }

  const canAdd = (cover?1:0) + gallery.length < MAX_LISTING_IMAGES;

  return (
    <main className="container py-8 space-y-6">
      <Link href="/account" className="text-[#d4af37] underline">← Volver a mi cuenta</Link>
      <h1 className="text-2xl font-semibold">Publicar propiedad</h1>

      <section className="bg-white rounded-2xl border shadow-sm p-6">
        <form onSubmit={onSubmit} className="space-y-5">
          <div className="grid sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-1">Título *</label>
              <input required name="title" className="w-full border rounded-lg px-3 py-2" placeholder="Casa Playa Vista" />
            </div>
            <div>
              <label className="block text-sm mb-1">Ubicación</label>
              <select name="location" className="w-full border rounded-lg px-3 py-2">
                <option value="">Selecciona</option>
                <option>Flamingo</option><option>Tamarindo</option>
                <option>Guanacaste</option><option>Santa Cruz</option><option>Nosara</option>
              </select>
            </div>
          </div>

          <div className="grid sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm mb-1">Precio (USD)</label>
              <input name="priceUsd" inputMode="numeric" className="w-full border rounded-lg px-3 py-2" placeholder="350000" />
            </div>

            <div>
              <label className="block text-sm mb-1">Portada (archivo o URL)</label>
              <div className="flex items-center gap-3">
                <input type="file" accept="image/*" onChange={onPickCover}/>
                <input className="w-full border rounded-lg px-3 py-2" placeholder="/uploads/portada.jpg o https://..."
                  onBlur={(e)=> setCover(e.currentTarget.value.trim()) }/>
              </div>
              {cover && (
                <div className="mt-3">
                  <Image src={cover} alt="cover" width={900} height={600} className="w-full max-w-md rounded-lg object-cover"/>
                </div>
              )}
            </div>
          </div>

          <div>
            <label className="block text-sm mb-1">Galería (hasta {MAX_LISTING_IMAGES} total)</label>
            <div className="flex items-center gap-3">
              <input type="file" accept="image/*" multiple onChange={onPickGallery} disabled={!canAdd}/>
              <input className="w-full border rounded-lg px-3 py-2" placeholder="Pega URL y Enter"
                onKeyDown={(e)=>{ if(e.key==="Enter"){ e.preventDefault(); addGalleryUrl((e.target as HTMLInputElement).value.trim()); (e.target as HTMLInputElement).value=""; }}} />
              <span className="text-xs text-gray-500">{(cover?1:0)+gallery.length} / {MAX_LISTING_IMAGES}</span>
            </div>
            {!!preview.length && (
              <div className="grid grid-cols-3 sm:grid-cols-5 gap-2 mt-3">
                {preview.map((u,i)=>(
                  <div key={i} className="relative">
                    <Image src={u} alt={"img"+i} width={300} height={200} className="w-full h-24 object-cover rounded"/>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm mb-1">Descripción</label>
            <textarea name="description" rows={4} className="w-full border rounded-lg px-3 py-2" placeholder="Detalles de la propiedad..."></textarea>
          </div>

          <button disabled={submitting} className="rounded-lg px-4 py-2 text-white" style={{ backgroundColor: '#d4af37', opacity: submitting ? .7 : 1 }}>
            {submitting ? "Publicando..." : "Publicar"}
          </button>
          {msg && <p className="text-sm mt-2">{msg}</p>}
        </form>
      </section>
    </main>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const user = await getUserFromRequest(req);
  if (!user) return { redirect: { destination: "/login", permanent: false } } as any;
  return { props: {} };
};
